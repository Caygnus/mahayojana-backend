name: Deploy to VPS

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            # Create apps directory if it doesn't exist
            mkdir -p ~/apps

            # Set up project directory
            APP_DIR=~/apps/mahayojana-backend
            if [ ! -d "$APP_DIR" ]; then
              echo "Creating new project directory..."
              git clone https://github.com/Caygnus/mahayojana-backend.git $APP_DIR
            fi

            # Navigate to project directory
            cd $APP_DIR || exit 1

            # Fetch latest changes
            git fetch origin main
            git reset --hard origin/main

            # Install Node.js if not present
            if ! command -v node &> /dev/null; then
              echo "Installing Node.js..."
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi

            # Install PM2 if not present
            if ! command -v pm2 &> /dev/null; then
              echo "Installing PM2..."
              sudo npm install -g pm2
            fi

            # Install dependencies
            npm install --include=dev

            # Decrypt environment variables if using dotenv-store
            if [ -f .env.store ]; then
              echo "Decrypting environment variables..."
              DOTENV_STORE_PASSPHRASE=${{ secrets.ENV_STORE_PASSWORD }} npx dotenv-store decrypt
            fi

            # Find an available port
            PORT_START=3000
            PORT_END=3999

            find_available_port() {
              for port in $(seq $PORT_START $PORT_END); do
                if ! netstat -tna | grep -q ":$port.*LISTEN"; then
                  echo $port
                  return 0
                fi
              done
              return 1
            }

            # Get available port
            AVAILABLE_PORT=$(find_available_port)
            if [ -z "$AVAILABLE_PORT" ]; then
              echo "No available ports found!"
              exit 1
            fi

            # Update .env with the new port
            if [ -f .env ]; then
              sed -i "s/^PORT=.*/PORT=$AVAILABLE_PORT/" .env
            else
              echo "PORT=$AVAILABLE_PORT" >> .env
            fi

            # Build the project
            npm run build

            # Start/Restart with PM2
            if pm2 list | grep -q "mahayojana-backend"; then
              echo "Restarting existing PM2 process..."
              pm2 restart mahayojana-backend --update-env
            else
              echo "Starting new PM2 process..."
              pm2 start ecosystem.config.js --env production --name mahayojana-backend
            fi

            # Save PM2 process list
            pm2 save

            # Set up PM2 startup script
            pm2 startup | tail -n 1 | sudo bash

            # Install Nginx if not present
            if ! command -v nginx &> /dev/null; then
              echo "Installing Nginx..."
              sudo apt-get update
              sudo apt-get install -y nginx
            fi

            # Configure Nginx
            NGINX_CONF="/etc/nginx/sites-available/mahayojana-backend"
            DOMAIN="api.mahayojana.site"

            # Create Nginx configuration
            sudo tee $NGINX_CONF << 'EOF'
            server {
                server_name api.mahayojana.site www.api.mahayojana.site;

                location / {
                    proxy_pass http://localhost:${AVAILABLE_PORT};
                    proxy_http_version 1.1;
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_cache_bypass $http_upgrade;
                }

                listen 80;
            }
            EOF

            # Create symbolic link if it doesn't exist
            if [ ! -f /etc/nginx/sites-enabled/mahayojana-backend ]; then
              sudo ln -s $NGINX_CONF /etc/nginx/sites-enabled/
            fi

            # Install Certbot if not present
            if ! command -v certbot &> /dev/null; then
              echo "Installing Certbot..."
              sudo apt-get update
              sudo apt-get install -y certbot python3-certbot-nginx
            fi

            # Check if SSL certificate exists
            if [ ! -d "/etc/letsencrypt/live/$DOMAIN" ]; then
              echo "Obtaining SSL certificate..."
              # Stop Nginx temporarily
              sudo systemctl stop nginx
              
              # Get SSL certificate
              sudo certbot certonly --standalone \
                --non-interactive \
                --agree-tos \
                --email ${{ secrets.SSL_EMAIL }} \
                -d $DOMAIN -d www.$DOMAIN
              
              # Start Nginx again
              sudo systemctl start nginx
              
              # Update Nginx configuration with SSL
              sudo tee $NGINX_CONF << 'EOF'
              server {
                  server_name api.mahayojana.site www.api.mahayojana.site;

                  location / {
                      proxy_pass http://localhost:${AVAILABLE_PORT};
                      proxy_http_version 1.1;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header Upgrade $http_upgrade;
                      proxy_set_header Connection 'upgrade';
                      proxy_cache_bypass $http_upgrade;
                  }

                  listen 443 ssl;
                  ssl_certificate /etc/letsencrypt/live/$DOMAIN/fullchain.pem;
                  ssl_certificate_key /etc/letsencrypt/live/$DOMAIN/privkey.pem;
                  include /etc/letsencrypt/options-ssl-nginx.conf;
                  ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
              }

              server {
                  if ($host = api.mahayojana.site) {
                      return 301 https://$host$request_uri;
                  }

                  listen 80;
                  server_name api.mahayojana.site www.api.mahayojana.site;
                  return 404;
              }
              EOF
            fi

            # Test Nginx configuration
            sudo nginx -t

            # Reload Nginx if test passes
            if [ $? -eq 0 ]; then
              sudo systemctl reload nginx
              echo "Nginx configuration updated and reloaded successfully!"
            else
              echo "Error in Nginx configuration!"
              exit 1
            fi

            echo "Deployment completed successfully! App running on port $AVAILABLE_PORT with SSL"
