{
  "openapi": "3.0.0",
  "info": {
    "title": "Mahayojana API Documentation",
    "version": "1.0.0",
    "description": "API documentation for the Mahayojana Backend",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "contact": {
      "name": "API Support",
      "email": "support@mahayojana.com"
    }
  },
  "servers": [
    {
      "url": "/v1",
      "description": "API V1"
    }
  ],
  "components": {
    "schemas": {
      "DynamicFieldDefinition": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "string",
              "number",
              "date",
              "boolean",
              "object",
              "array"
            ],
            "description": "Data type of the field"
          },
          "label": {
            "type": "string",
            "description": "Display label for the field"
          },
          "description": {
            "type": "string",
            "description": "Description of the field"
          },
          "required": {
            "type": "boolean",
            "description": "Whether the field is required"
          },
          "minLength": {
            "type": "integer",
            "description": "Minimum length for string fields"
          },
          "maxLength": {
            "type": "integer",
            "description": "Maximum length for string fields"
          },
          "pattern": {
            "type": "string",
            "description": "Regex pattern for string validation"
          },
          "enum": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of allowed values for string fields"
          },
          "min": {
            "type": "number",
            "description": "Minimum value for number fields"
          },
          "max": {
            "type": "number",
            "description": "Maximum value for number fields"
          },
          "step": {
            "type": "number",
            "description": "Step value for number fields"
          },
          "minItems": {
            "type": "integer",
            "description": "Minimum number of items for array fields"
          },
          "maxItems": {
            "type": "integer",
            "description": "Maximum number of items for array fields"
          },
          "uniqueItems": {
            "type": "boolean",
            "description": "Whether array items must be unique"
          },
          "displayOrder": {
            "type": "integer",
            "description": "Order to display the field in UI"
          },
          "placeholder": {
            "type": "string",
            "description": "Placeholder text for the field"
          },
          "helpText": {
            "type": "string",
            "description": "Help text to display with the field"
          },
          "hidden": {
            "type": "boolean",
            "description": "Whether the field should be hidden in UI"
          },
          "default": {
            "description": "Default value for the field"
          },
          "dependsOn": {
            "type": "object",
            "properties": {
              "field": {
                "type": "string",
                "description": "Field this field depends on"
              },
              "value": {
                "description": "Value that the dependent field must have"
              }
            },
            "description": "Dependency configuration for conditional display/validation"
          },
          "properties": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/DynamicFieldDefinition"
            },
            "description": "Nested field definitions for object type"
          },
          "items": {
            "$ref": "#/components/schemas/DynamicFieldDefinition",
            "description": "Item definition for array type"
          }
        },
        "required": [
          "type",
          "label"
        ]
      },
      "Policy": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          },
          "policyNumber": {
            "type": "string",
            "description": "Unique policy number"
          },
          "policyType": {
            "type": "string",
            "description": "Type of policy"
          },
          "title": {
            "type": "string",
            "description": "Policy title"
          },
          "description": {
            "type": "string",
            "description": "Policy description"
          },
          "policyStartDate": {
            "type": "string",
            "format": "date-time",
            "description": "Policy start date"
          },
          "policyEndDate": {
            "type": "string",
            "format": "date-time",
            "description": "Policy end date"
          },
          "policyStatus": {
            "type": "string",
            "description": "Current status of the policy"
          },
          "policyAmount": {
            "type": "number",
            "description": "Policy amount"
          },
          "policyTerm": {
            "type": "number",
            "description": "Policy term in months"
          },
          "schemaDefinition": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/DynamicFieldDefinition"
            },
            "description": "Schema definition for dynamic fields"
          },
          "dynamicFields": {
            "type": "object",
            "additionalProperties": true,
            "description": "Dynamic fields data based on schema definition"
          }
        }
      },
      "Agent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique identifier"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Agent email address"
          },
          "name": {
            "type": "string",
            "description": "Agent name"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "Creation timestamp"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "Last update timestamp"
          }
        }
      },
      "LoginRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "Agent email address"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Agent password"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "SignupRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Agent name"
          },
          "email": {
            "type": "string",
            "format": "email",
            "description": "Agent email address"
          },
          "password": {
            "type": "string",
            "format": "password",
            "description": "Agent password"
          }
        },
        "required": [
          "name",
          "email",
          "password"
        ]
      },
      "TokenResponse": {
        "type": "object",
        "properties": {
          "agent": {
            "$ref": "#/components/schemas/Agent"
          },
          "token": {
            "type": "string",
            "description": "JWT token"
          }
        }
      },
      "CreateOtpRequest": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "Phone number to send OTP to"
          }
        },
        "required": [
          "phone"
        ]
      },
      "Error": {
        "type": "object",
        "properties": {
          "code": {
            "type": "number"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "CreatePolicyRequest": {
        "type": "object",
        "required": [
          "policyNumber",
          "policyType",
          "title",
          "policyStartDate",
          "policyEndDate",
          "policyStatus",
          "policyAmount",
          "policyTerm"
        ],
        "properties": {
          "policyNumber": {
            "type": "string",
            "description": "Unique policy number"
          },
          "policyType": {
            "type": "string",
            "description": "Type of policy"
          },
          "title": {
            "type": "string",
            "description": "Policy title"
          },
          "description": {
            "type": "string",
            "description": "Policy description"
          },
          "policyStartDate": {
            "type": "string",
            "format": "date-time",
            "description": "Policy start date"
          },
          "policyEndDate": {
            "type": "string",
            "format": "date-time",
            "description": "Policy end date"
          },
          "policyStatus": {
            "type": "string",
            "description": "Current status of the policy"
          },
          "policyAmount": {
            "type": "number",
            "description": "Policy amount"
          },
          "policyTerm": {
            "type": "number",
            "description": "Policy term in months"
          },
          "schemaDefinition": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/DynamicFieldDefinition"
            },
            "description": "Schema definition for dynamic fields"
          },
          "dynamicFields": {
            "type": "object",
            "additionalProperties": true,
            "description": "Dynamic fields data based on schema definition"
          }
        }
      },
      "UpdateSchemaRequest": {
        "type": "object",
        "required": [
          "schemaDefinition"
        ],
        "properties": {
          "schemaDefinition": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/DynamicFieldDefinition"
            },
            "description": "Schema definition for dynamic fields"
          }
        }
      },
      "UpdateDynamicFieldsRequest": {
        "type": "object",
        "required": [
          "dynamicFields"
        ],
        "properties": {
          "dynamicFields": {
            "type": "object",
            "additionalProperties": true,
            "description": "Dynamic fields data based on schema definition"
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/auth/signup-agent": {
      "post": {
        "summary": "Register a new agent",
        "description": "Create a new agent account",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SignupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Agent created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Agent created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Agent"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error"
          },
          "409": {
            "description": "Email already exists"
          }
        }
      }
    },
    "/auth/login-agent": {
      "post": {
        "summary": "Login as an agent",
        "description": "Authenticate an agent and get a JWT token",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Agent logged in successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Agent logged in successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/TokenResponse"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error"
          },
          "401": {
            "description": "Invalid credentials"
          },
          "404": {
            "description": "Agent not found"
          }
        }
      }
    },
    "/otp": {
      "post": {
        "summary": "Generate and send OTP",
        "description": "Generates a one-time password and sends it to the provided phone number",
        "tags": [
          "OTP"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateOtpRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OTP sent successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "OTP sent successfully"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error"
          }
        }
      }
    },
    "/policies": {
      "post": {
        "summary": "Create a new policy",
        "tags": [
          "Policies"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePolicyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Policy created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Policy created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Policy"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "get": {
        "summary": "Get all policies with pagination and filtering",
        "tags": [
          "Policies"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "schema": {
              "type": "integer",
              "default": 1
            },
            "description": "Page number"
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer",
              "default": 10
            },
            "description": "Number of items per page"
          },
          {
            "in": "query",
            "name": "policyType",
            "schema": {
              "type": "string"
            },
            "description": "Filter by policy type"
          },
          {
            "in": "query",
            "name": "policyStatus",
            "schema": {
              "type": "string"
            },
            "description": "Filter by policy status"
          },
          {
            "in": "query",
            "name": "title",
            "schema": {
              "type": "string"
            },
            "description": "Filter by title (partial match)"
          },
          {
            "in": "query",
            "name": "startDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter by start date (from)"
          },
          {
            "in": "query",
            "name": "endDate",
            "schema": {
              "type": "string",
              "format": "date"
            },
            "description": "Filter by end date (to)"
          },
          {
            "in": "query",
            "name": "dynamic.*",
            "description": "Filter by dynamic fields (e.g., dynamic.category=OBC)"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Policies retrieved successfully"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "policies": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/Policy"
                          }
                        },
                        "total": {
                          "type": "integer"
                        },
                        "page": {
                          "type": "integer"
                        },
                        "limit": {
                          "type": "integer"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/policies/{id}": {
      "get": {
        "summary": "Get a policy by ID",
        "tags": [
          "Policies"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Policy ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Policy retrieved successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Policy"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Policy not found"
          }
        }
      },
      "put": {
        "summary": "Update a policy",
        "tags": [
          "Policies"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Policy ID"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "policyNumber": {
                    "type": "string"
                  },
                  "policyType": {
                    "type": "string"
                  },
                  "title": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "policyStartDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "policyEndDate": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "policyStatus": {
                    "type": "string"
                  },
                  "policyAmount": {
                    "type": "number"
                  },
                  "policyTerm": {
                    "type": "number"
                  },
                  "schemaDefinition": {
                    "type": "object",
                    "additionalProperties": {
                      "$ref": "#/components/schemas/DynamicFieldDefinition"
                    }
                  },
                  "dynamicFields": {
                    "type": "object",
                    "additionalProperties": true
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Policy updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Policy updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Policy"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Policy not found"
          }
        }
      },
      "delete": {
        "summary": "Delete a policy",
        "tags": [
          "Policies"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Policy ID"
          }
        ],
        "responses": {
          "200": {
            "description": "Policy deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Policy deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Policy not found"
          }
        }
      }
    },
    "/policies/{id}/schema": {
      "put": {
        "summary": "Update policy schema definition",
        "description": "Update the schema definition for dynamic fields of a policy",
        "tags": [
          "Policies"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Policy ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSchemaRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Schema updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Policy schema updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Policy"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Policy not found"
          }
        }
      }
    },
    "/policies/{id}/fields": {
      "put": {
        "summary": "Update policy dynamic fields",
        "description": "Update the dynamic fields data for a policy",
        "tags": [
          "Policies"
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true,
            "description": "Policy ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateDynamicFieldsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Dynamic fields updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Policy dynamic fields updated successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Policy"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Policy not found"
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "User authentication and registration"
    },
    {
      "name": "OTP",
      "description": "One-Time Password generation and verification"
    },
    {
      "name": "Policies",
      "description": "Policy management with dynamic fields"
    }
  ]
}